---
- name: Make certain Riak is stopped
  service: name=riak state=stopped
  ignore_errors: yes
  # Will always fail if Riak has never been installed before

- name: Execute RedHat OS family specific install
  include: RedHat.yml
  when: ansible_os_family == 'RedHat'

- name: Execute Debian OS family specific install
  include: Debian.yml
  when: ansible_os_family == 'Debian'

- name: update pam configuration
  copy: src=etc_security_limits.d_riak.conf dest=/etc/security/limits.d/riak.conf owner=root group=root mode=0644

- name: mount the riak volume with optmized settings
  mount: name={{ riak_mountpoint }} src={{ riak_partition }} opts="{{riak_mount_options}}" fstype="{{riak_filesystem}}" state=mounted
  when: riak_tune_disks

- name: create script with disk tuning commands
  template: src=riak_disk_tune.sh.j2 dest=/usr/local/bin/riak_disk_tune.sh owner=root group=root mode=0755
  notify: run riak_disk_tune
  when: riak_tune_disks

- name: add line to rc.local to call riak_disk_tune on boot
  lineinfile: dest=/etc/rc.local line="if [ -x /usr/local/bin/riak_disk_tune.sh ]; then /usr/local/bin/riak_disk_tune.sh; fi" insertbefore="^exit 0"
  when: riak_tune_disks

- name: create sysctl.d
  file: dest=/etc/sysctl.d state=directory

- name: configure sysctl
  template: src=etc_sysctl.d_riak.conf.j2 dest=/etc/sysctl.d/riak.conf owner=root group=root mode=0644

- name: copying custom beams
  copy: "src={{ item }} dest={{ riak_patch_dir }}/"
  with_fileglob:
    - "{{riak_custom_beams_dir}}/*.beam"
  when: riak_custom_beams_dir is defined

- name: Check if this is first pass
  stat: path=/etc/riak/riak.conf.dist
  register: dist

- name: preserve distribution copy of riak.conf if not already done
  command: "cp -i /etc/riak/riak.conf /etc/riak/riak.conf.dist"
  tags: configfiles
  when: not dist.stat.exists

- name: Set listening ip/port and nodename within riak.conf
  lineinfile: "dest=/etc/riak/riak.conf regexp='^{{ item.key }} = .+$' line='{{ item.key }} = {{ item.value }}'"
  tags: configfiles
  with_items:
    - { key: listener.http.internal, value: "{{ riak_http_conf }}" }
    - { key: listener.protobuf.internal, value: "{{ riak_pb_conf }}" }
    - { key: nodename, value: "{{ riak_node_name }}" }

- name: Replace / add config settings to riak.conf
  lineinfile: "dest=/etc/riak/riak.conf regexp='^#{0,1}{{ item.key|replace('-','.')  }} = .+$' line='{{ item.key|replace('-','.') }} = {{ item.value }}'"
  tags: configfiles
  when: riak_conf is defined
  with_dict: riak_conf

- name: Tag riak.conf as ansible managed
  lineinfile: dest=/etc/riak/riak.conf regexp='^## Ansible Managed.*$'  line='## Ansible Managed' insertbefore='BOF'
  tags: configfiles

- name: Make certain Riak is started and set to start on boot
  service: name=riak enabled=yes state=started

- name: Wait for Riak to start up before continuing
  wait_for: delay=5 timeout=30 host={{ inventory_hostname }} port={{ riak_pb_port }} state=started

- name: Bucket operations
  include: buckets.yml

- name: Security operations
  include: security.yml